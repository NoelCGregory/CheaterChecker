{"ast":null,"code":"import { db, app } from \"./base\";\nimport firebase from \"firebase/app\";\n\nconst checkUserExist = async uid => {\n  const docRef = db.collection(\"users\").doc(uid);\n  const doc = await docRef.get();\n  console.log(doc.exists);\n\n  if (!doc.exists) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst addUser = async (uid, val) => {\n  const docRef = db.collection(\"users\").doc(uid);\n  let userRole = {\n    role: null\n  };\n\n  if (val) {\n    userRole.role = true;\n  } else {\n    userRole.role = false;\n  }\n\n  await docRef.set(userRole);\n};\n\nconst addInfo = async (values, uid) => {\n  //const docRef = await db.collection(\"users\").doc(uid).add(values);\n  const res = await db.collection(\"users\").add({\n    name: \"Tokyo\",\n    country: \"Japan\"\n  });\n};\n\nconst addClass = code => {\n  const docRef = db.collection(\"classes\").doc(code);\n  let data = {\n    classCode: code,\n    className: \"Class\" + code,\n    students: null\n  };\n  docRef.set(data);\n};\n\nconst joinClass = async (code, username) => {\n  const washingtonRef = db.collection(\"classes\").doc(code);\n  await washingtonRef.update({\n    students: firebase.firestore.FieldValue.arrayUnion(username)\n  });\n};\n\nconst getUserRole = async uid => {\n  const docRef = db.collection(\"users\").doc(uid);\n  const doc = await docRef.get();\n  const data = doc.data();\n  return data;\n};\n\nexport { checkUserExist, addUser, getUserRole, addClass, joinClass, addInfo };","map":{"version":3,"sources":["C:/Users/Noel/Desktop/Javascript/Node.js/CheaterChecker/frontend/src/utils/Firestore.js"],"names":["db","app","firebase","checkUserExist","uid","docRef","collection","doc","get","console","log","exists","addUser","val","userRole","role","set","addInfo","values","res","add","name","country","addClass","code","data","classCode","className","students","joinClass","username","washingtonRef","update","firestore","FieldValue","arrayUnion","getUserRole"],"mappings":"AAAA,SAASA,EAAT,EAAaC,GAAb,QAAwB,QAAxB;AACA,OAAOC,QAAP,MAAqB,cAArB;;AACA,MAAMC,cAAc,GAAG,MAAOC,GAAP,IAAe;AACpC,QAAMC,MAAM,GAAGL,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BH,GAA3B,CAAf;AACA,QAAMG,GAAG,GAAG,MAAMF,MAAM,CAACG,GAAP,EAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,MAAhB;;AAEA,MAAI,CAACJ,GAAG,CAACI,MAAT,EAAiB;AACf,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAVD;;AAYA,MAAMC,OAAO,GAAG,OAAOR,GAAP,EAAYS,GAAZ,KAAoB;AAClC,QAAMR,MAAM,GAAGL,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BH,GAA3B,CAAf;AACA,MAAIU,QAAQ,GAAG;AACbC,IAAAA,IAAI,EAAE;AADO,GAAf;;AAGA,MAAIF,GAAJ,EAAS;AACPC,IAAAA,QAAQ,CAACC,IAAT,GAAgB,IAAhB;AACD,GAFD,MAEO;AACLD,IAAAA,QAAQ,CAACC,IAAT,GAAgB,KAAhB;AACD;;AACD,QAAMV,MAAM,CAACW,GAAP,CAAWF,QAAX,CAAN;AACD,CAXD;;AAaA,MAAMG,OAAO,GAAG,OAAOC,MAAP,EAAed,GAAf,KAAuB;AACrC;AACA,QAAMe,GAAG,GAAG,MAAMnB,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBc,GAAvB,CAA2B;AAC3CC,IAAAA,IAAI,EAAE,OADqC;AAE3CC,IAAAA,OAAO,EAAE;AAFkC,GAA3B,CAAlB;AAID,CAND;;AAOA,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AACzB,QAAMnB,MAAM,GAAGL,EAAE,CAACM,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6BiB,IAA7B,CAAf;AACA,MAAIC,IAAI,GAAG;AACTC,IAAAA,SAAS,EAAEF,IADF;AAETG,IAAAA,SAAS,EAAE,UAAUH,IAFZ;AAGTI,IAAAA,QAAQ,EAAE;AAHD,GAAX;AAMAvB,EAAAA,MAAM,CAACW,GAAP,CAAWS,IAAX;AACD,CATD;;AAUA,MAAMI,SAAS,GAAG,OAAOL,IAAP,EAAaM,QAAb,KAA0B;AAC1C,QAAMC,aAAa,GAAG/B,EAAE,CAACM,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6BiB,IAA7B,CAAtB;AAEA,QAAMO,aAAa,CAACC,MAAd,CAAqB;AACzBJ,IAAAA,QAAQ,EAAE1B,QAAQ,CAAC+B,SAAT,CAAmBC,UAAnB,CAA8BC,UAA9B,CAAyCL,QAAzC;AADe,GAArB,CAAN;AAGD,CAND;;AAOA,MAAMM,WAAW,GAAG,MAAOhC,GAAP,IAAe;AACjC,QAAMC,MAAM,GAAGL,EAAE,CAACM,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BH,GAA3B,CAAf;AACA,QAAMG,GAAG,GAAG,MAAMF,MAAM,CAACG,GAAP,EAAlB;AACA,QAAMiB,IAAI,GAAGlB,GAAG,CAACkB,IAAJ,EAAb;AACA,SAAOA,IAAP;AACD,CALD;;AAOA,SAAStB,cAAT,EAAyBS,OAAzB,EAAkCwB,WAAlC,EAA+Cb,QAA/C,EAAyDM,SAAzD,EAAoEZ,OAApE","sourcesContent":["import { db, app } from \"./base\";\r\nimport firebase from \"firebase/app\";\r\nconst checkUserExist = async (uid) => {\r\n  const docRef = db.collection(\"users\").doc(uid);\r\n  const doc = await docRef.get();\r\n  console.log(doc.exists);\r\n\r\n  if (!doc.exists) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst addUser = async (uid, val) => {\r\n  const docRef = db.collection(\"users\").doc(uid);\r\n  let userRole = {\r\n    role: null,\r\n  };\r\n  if (val) {\r\n    userRole.role = true;\r\n  } else {\r\n    userRole.role = false;\r\n  }\r\n  await docRef.set(userRole);\r\n};\r\n\r\nconst addInfo = async (values, uid) => {\r\n  //const docRef = await db.collection(\"users\").doc(uid).add(values);\r\n  const res = await db.collection(\"users\").add({\r\n    name: \"Tokyo\",\r\n    country: \"Japan\",\r\n  });\r\n};\r\nconst addClass = (code) => {\r\n  const docRef = db.collection(\"classes\").doc(code);\r\n  let data = {\r\n    classCode: code,\r\n    className: \"Class\" + code,\r\n    students: null,\r\n  };\r\n\r\n  docRef.set(data);\r\n};\r\nconst joinClass = async (code, username) => {\r\n  const washingtonRef = db.collection(\"classes\").doc(code);\r\n\r\n  await washingtonRef.update({\r\n    students: firebase.firestore.FieldValue.arrayUnion(username),\r\n  });\r\n};\r\nconst getUserRole = async (uid) => {\r\n  const docRef = db.collection(\"users\").doc(uid);\r\n  const doc = await docRef.get();\r\n  const data = doc.data();\r\n  return data;\r\n};\r\n\r\nexport { checkUserExist, addUser, getUserRole, addClass, joinClass, addInfo };\r\n"]},"metadata":{},"sourceType":"module"}