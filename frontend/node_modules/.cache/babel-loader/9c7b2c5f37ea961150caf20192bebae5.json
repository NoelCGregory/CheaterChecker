{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noel\\\\Desktop\\\\Javascript\\\\Node.js\\\\CheaterChecker\\\\frontend\\\\src\\\\utils\\\\Auth.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { app } from \"./base\";\nimport { checkUserExist } from \"./Firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext();\n\nclass AuthProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentUser: null,\n      loader: true\n    };\n\n    this.checkUser = async () => {\n      const {\n        currentUser\n      } = this.state;\n      console.log(currentUser);\n\n      if (currentUser != null) {\n        let res = await checkUserExist(currentUser.uid);\n\n        if (res) {\n          this.props.history.push({\n            pathname: \"/selectrole\",\n            state: {\n              uid: currentUser.uid\n            }\n          });\n        } else {\n          this.props.history.push(\"/\");\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    app.auth().onAuthStateChanged(user => {\n      this.setState({\n        currentUser: user,\n        loader: false\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    this.checkUser();\n  }\n\n  render() {\n    const {\n      currentUser,\n      loader\n    } = this.state;\n\n    if (loader) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loader....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n        value: {\n          currentUser\n        },\n        children: this.props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default _c = withRouter(AuthProvider); // export const AuthProvider = ({ children }) => {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [pending, setPending] = useState(true);\n//   useEffect(() => {\n//     app.auth().onAuthStateChanged((user) => {\n//       setCurrentUser(user);\n//       setPending(false);\n//     });\n//   }, []);\n//   if (pending) {\n//     return <>Loading...</>;\n//   }\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         currentUser,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/Noel/Desktop/Javascript/Node.js/CheaterChecker/frontend/src/utils/Auth.js"],"names":["React","Component","withRouter","app","checkUserExist","AuthContext","createContext","AuthProvider","state","currentUser","loader","checkUser","console","log","res","uid","props","history","push","pathname","componentDidMount","auth","onAuthStateChanged","user","setState","componentDidUpdate","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAEA,OAAO,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;;AAEP,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCO,KADmC,GAC3B;AAAEC,MAAAA,WAAW,EAAE,IAAf;AAAqBC,MAAAA,MAAM,EAAE;AAA7B,KAD2B;;AAAA,SAQnCC,SARmC,GAQvB,YAAY;AACtB,YAAM;AAAEF,QAAAA;AAAF,UAAkB,KAAKD,KAA7B;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;;AACA,UAAIA,WAAW,IAAI,IAAnB,EAAyB;AACvB,YAAIK,GAAG,GAAG,MAAMV,cAAc,CAACK,WAAW,CAACM,GAAb,CAA9B;;AACA,YAAID,GAAJ,EAAS;AACP,eAAKE,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB;AACtBC,YAAAA,QAAQ,EAAE,aADY;AAEtBX,YAAAA,KAAK,EAAE;AAAEO,cAAAA,GAAG,EAAEN,WAAW,CAACM;AAAnB;AAFe,WAAxB;AAID,SALD,MAKO;AACL,eAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD;AACF;AACF,KAtBkC;AAAA;;AAGnCE,EAAAA,iBAAiB,GAAG;AAClBjB,IAAAA,GAAG,CAACkB,IAAJ,GAAWC,kBAAX,CAA+BC,IAAD,IAAU;AACtC,WAAKC,QAAL,CAAc;AAAEf,QAAAA,WAAW,EAAEc,IAAf;AAAqBb,QAAAA,MAAM,EAAE;AAA7B,OAAd;AACD,KAFD;AAGD;;AAgBDe,EAAAA,kBAAkB,GAAG;AACnB,SAAKd,SAAL;AACD;;AACDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjB,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAA0B,KAAKF,KAArC;;AACA,QAAIE,MAAJ,EAAY;AACV,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,0BACE,QAAC,WAAD,CAAa,QAAb;AAAsB,QAAA,KAAK,EAAE;AAAED,UAAAA;AAAF,SAA7B;AAAA,kBACG,KAAKO,KAAL,CAAWW;AADd;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AACF;;AArCkC;;AAwCrC,oBAAezB,UAAU,CAACK,YAAD,CAAzB,C,CACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { app } from \"./base\";\nimport { checkUserExist } from \"./Firestore\";\n\nexport const AuthContext = React.createContext();\n\nclass AuthProvider extends Component {\n  state = { currentUser: null, loader: true };\n\n  componentDidMount() {\n    app.auth().onAuthStateChanged((user) => {\n      this.setState({ currentUser: user, loader: false });\n    });\n  }\n  checkUser = async () => {\n    const { currentUser } = this.state;\n    console.log(currentUser);\n    if (currentUser != null) {\n      let res = await checkUserExist(currentUser.uid);\n      if (res) {\n        this.props.history.push({\n          pathname: \"/selectrole\",\n          state: { uid: currentUser.uid },\n        });\n      } else {\n        this.props.history.push(\"/\");\n      }\n    }\n  };\n  componentDidUpdate() {\n    this.checkUser();\n  }\n  render() {\n    const { currentUser, loader } = this.state;\n    if (loader) {\n      return <div>Loader....</div>;\n    } else {\n      return (\n        <AuthContext.Provider value={{ currentUser }}>\n          {this.props.children}\n        </AuthContext.Provider>\n      );\n    }\n  }\n}\n\nexport default withRouter(AuthProvider);\n// export const AuthProvider = ({ children }) => {\n//   const [currentUser, setCurrentUser] = useState(null);\n//   const [pending, setPending] = useState(true);\n\n//   useEffect(() => {\n//     app.auth().onAuthStateChanged((user) => {\n//       setCurrentUser(user);\n//       setPending(false);\n//     });\n//   }, []);\n\n//   if (pending) {\n//     return <>Loading...</>;\n//   }\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         currentUser,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}